from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    InlineQueryHandler, 
    CallbackContext, 
    CallbackQueryHandler,
    ConversationHandler
)
from telegram.constants import ParseMode

from config.config import TOKEN, logger, RANGE_LIST
from config.functions import make_buttons, keyboard
from config.list import main_menu
from config.converstation import *

import os



application = ApplicationBuilder().token(TOKEN).build()
switch = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    first_name = update.effective_user.first_name

    await context.bot.send_message(chat_id=update.effective_chat.id, 
                                text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã, <b>{first_name}</b>\n\n'
                                '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–≤–æ—é google —Ç–∞–±–ª–∏—Ü—É '
                                '–≤ HTML –∫–æ–¥.\n\n–û–∑–Ω–∞–∫–æ–º—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –ø–æ–ª—å–∑—É–π—Å—è üëç', 
                                parse_mode=ParseMode.HTML,
                                reply_markup=await make_buttons(main_menu))


async def callback_handler(update: Update, context: CallbackContext):

    callback_data = update.callback_query.data
    call = update.callback_query
    if callback_data == 'instruction':
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, message_id=call.message.message_id,
                                text='üìë –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ '
                                '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å google —Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ—Å—Ç—É–ø–æ–º –ø–æ —Å—Å—ã–ª–∫–µ.\n\n'
                                '‚ùóÔ∏è–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –º–æ–∂–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ü–≤–µ—Ç —è—á–µ–π–∫–∏, —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞‚ùóÔ∏è'
                                '\n\n–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ, –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Å <b>ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã</b>.\n'
                                'ID google —Ç–∞–±–ª–∏—Ü–µ —É–∫–∞–∑–∞–Ω –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ üëá', 
                                parse_mode=ParseMode.HTML,
                                reply_markup=None)
        
        with open(f"static/1a.png", "rb") as file:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=file)

        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                text='–î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫\n'
                                '‚ùóÔ∏è–£–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>B3:J7</b>‚ùóÔ∏è', 
                                parse_mode=ParseMode.HTML)
        
        with open(f"static/2a.png", "rb") as file:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=file)
        
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                text='–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ, —Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç '
                                '–≤–∞–º HTML —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ '
                                '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ª–∏–±–æ –æ—Ç–∫—Ä—ã—Ç—å —Å –ø–æ–º–æ—â—å—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ '
                                '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏ –≤ –Ω–µ–≥–æ –ø—Ä–∞–≤–∫–∏')
        
        with open(f"static/3a.png", "rb") as file:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=file)
        
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                text='–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üëç', 
                                reply_markup=await make_buttons(main_menu))

    

        


async def start_html(update: Update, context: ContextTypes.DEFAULT_TYPE, sheet_id: str, ranges: str, mes_id: int):

    ranges = ranges.split(":")
    start_index = ranges[0].upper()
    end_index = ranges[1].upper()
    ranges = [f'{start_index}', f'{end_index}']

    from functions_api import get_table_data
    from config.html_generation import generate_html_table
    try:
        result = get_table_data(sheet_id, ranges)

        html_table = generate_html_table(result)

        user_id = update.effective_chat.id

        with open(f"time_files/{user_id}_table.html", "w", encoding="utf-8") as file:
            file.write(html_table)

        with open(f"time_files/{user_id}_table.html", "rb") as file:

            await context.bot.delete_message(chat_id=update.effective_chat.id,
                                            message_id=mes_id)
            await context.bot.send_document(chat_id=update.effective_chat.id,
                                            document=file, reply_markup=ReplyKeyboardRemove())
            await context.bot.send_message(chat_id=update.effective_chat.id, 
                                           text='–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –∫–æ–¥–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ '
                                '–ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ë–ª–æ–∫–Ω–æ—Ç"', 
                                reply_markup=await make_buttons(main_menu))
            
        os.remove(f"time_files/{user_id}_table.html")
    except Exception as e:
        logger.error(f'Error: {e=}')


async def final_functions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    ranges = update.message.text.split(":")
    start_index = RANGE_LIST.index(ranges[0][0].lower())
    end_index = RANGE_LIST.index(ranges[1][0].lower())

    if end_index < start_index:
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä –ê1:–°4\n"
                                "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö A:Z")
        return RANGE

    context.user_data['range'] = update.message.text

    mes = await context.bot.send_message(chat_id=update.effective_chat.id, 
                                   disable_web_page_preview=True,
                                text=f"–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    await start_html(update, context, context.user_data['table_id'], 
                    context.user_data['range'], mes.message_id)
    
    return ConversationHandler.END


def main():
    start_handler = CommandHandler('start', start)

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(make_links, pattern='^starts$')],
        states={
            PLATFORM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_range)],
            RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, final_functions)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    call_back_query = CallbackQueryHandler(callback_handler)

    
    application.add_handler(start_handler)
    application.add_handler(conv_handler)
    application.add_handler(call_back_query)

    application.run_polling()

if __name__ == '__main__':
    main()